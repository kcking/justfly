// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGRadioactivitySubsystem.h"

AFGRadioactivitySubsystem::AFGRadioactivitySubsystem() : Super() {
	this->PrimaryActorTick.TickGroup = TG_PrePhysics; this->PrimaryActorTick.EndTickGroup = TG_PrePhysics; this->PrimaryActorTick.bTickEvenWhenPaused = false; this->PrimaryActorTick.bCanEverTick = true; this->PrimaryActorTick.bStartWithTickEnabled = true; this->PrimaryActorTick.bAllowTickOnDedicatedServer = true; this->PrimaryActorTick.TickInterval = 0;
	this->bAlwaysRelevant = true;
	this->bReplicates = true;
}
void AFGRadioactivitySubsystem::BeginPlay(){ }
void AFGRadioactivitySubsystem::Tick(float dt){ }
void AFGRadioactivitySubsystem::DisplayDebug( UCanvas* canvas, const  FDebugDisplayInfo& debugDisplay, float& YL, float& YPos){ }
void AFGRadioactivitySubsystem::OnActorSpawned(AActor* spawnedActor){ }
void AFGRadioactivitySubsystem::OnActorDestroyed(AActor* destroyedActor){ }
AFGRadioactivitySubsystem* AFGRadioactivitySubsystem::Get(UWorld* world){ return nullptr; }
AFGRadioactivitySubsystem* AFGRadioactivitySubsystem::Get(UObject* worldContext){ return nullptr; }
void AFGRadioactivitySubsystem::SetEmitter(UObject* owner,
					 USceneComponent* attachRoot,
					 const FVector& attachLocation,
					 TSubclassOf< UFGItemDescriptor > itemClass,
					 int32 itemAmount,
					 int32 UID){ }
void AFGRadioactivitySubsystem::SetEmitter_Threadsafe(UObject* owner,
								USceneComponent* attachRoot,
								const FVector& attachLocation,
								TSubclassOf< UFGItemDescriptor > itemClass,
								int32 itemAmount,
								int32 UID){ }
void AFGRadioactivitySubsystem::SetEmitter(UObject* owner,
					 USceneComponent* attachRoot,
					 const FVector& attachLocation,
					 float decay,
					 int32 UID){ }
void AFGRadioactivitySubsystem::RemoveEmitter_Threadsafe(UObject* owner, int32 UID){ }
void AFGRadioactivitySubsystem::RemoveEmitter(UObject* owner, int32 UID){ }
void AFGRadioactivitySubsystem::ResetEmitters(UObject* owner){ }
void AFGRadioactivitySubsystem::RemoveEmitters(UObject* owner){ }
float AFGRadioactivitySubsystem::calculateIntensity(int32 itemAmount, float itemDecay, float distance, float radiationFalloffByDistance){ return float(); }
FRadioactiveSource& AFGRadioactivitySubsystem::FindOrAddSource(UObject* owner){ return *(new FRadioactiveSource); }
FRadioactiveSource* AFGRadioactivitySubsystem::FindSource(UObject* owner){ return nullptr; }
FRadioactiveEmitter& AFGRadioactivitySubsystem::FindOrAddEmitter(TArray< FRadioactiveEmitter >& emitters, int32 UID){ return *(new FRadioactiveEmitter); }
int32 AFGRadioactivitySubsystem::FindEmitter(TArray< FRadioactiveEmitter >& emitters, int32 UID){ return int32(); }
