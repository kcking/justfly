// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGColorGun.h"
#include "FGDamageType.h"

AFGColorGun::AFGColorGun() : Super() {
	this->mRedundantTargetCrosshairColor.R = 0.5; this->mRedundantTargetCrosshairColor.G = 0.200000002980232; this->mRedundantTargetCrosshairColor.B = 0.200000002980232; this->mRedundantTargetCrosshairColor.A = 0.699999988079071;
	this->mNoTargetCrosshairColor.R = 0.400000005960464; this->mNoTargetCrosshairColor.G = 0.100000001490116; this->mNoTargetCrosshairColor.B = 0.100000001490116; this->mNoTargetCrosshairColor.A = 0.400000005960464;
	this->mNonColorableTargetCrosshairColor.R = 0.100000001490116; this->mNonColorableTargetCrosshairColor.G = 0.0500000007450581; this->mNonColorableTargetCrosshairColor.B = 0.0500000007450581; this->mNonColorableTargetCrosshairColor.A = 0.920000016689301;
	this->mColorSlot = 1;
	this->mInstantHitDamage = 10;
	this->mWeaponTraceLength = 10000;
	this->mMagSize = 5;
	this->mDamageTypeClass = UFGDamageType::StaticClass();
	this->mReloadTime = 1.5;
	this->mFireRate = 0.5;
	this->mEquipmentSlot = EEquipmentSlot::ES_ARMS;
	this->mArmAnimation = EArmEquipment::AE_ColorGun;
	this->PrimaryActorTick.TickGroup = TG_PrePhysics; this->PrimaryActorTick.EndTickGroup = TG_PrePhysics; this->PrimaryActorTick.bTickEvenWhenPaused = false; this->PrimaryActorTick.bCanEverTick = true; this->PrimaryActorTick.bStartWithTickEnabled = false; this->PrimaryActorTick.bAllowTickOnDedicatedServer = true; this->PrimaryActorTick.TickInterval = 0;
	this->bOnlyRelevantToOwner = true;
	this->bNetUseOwnerRelevancy = true;
	this->bReplicates = true;
}
void AFGColorGun::SetColorSlot(uint8 slotIndex){ }
void AFGColorGun::Server_SetColorSlot_Implementation(uint8 slotIndex){ }
bool AFGColorGun::Server_SetColorSlot_Validate(uint8 slotIndex){ return bool(); }
uint8 AFGColorGun::GetMaxNumColorSlots(){ return uint8(); }
uint8 AFGColorGun::GetNumColorSlotsExposedToPlayers(){ return uint8(); }
void AFGColorGun::SetPrimaryColorForSlot(uint8 slotIndex, FLinearColor newColor){ }
void AFGColorGun::Server_SetPrimaryColorForSlot_Implementation(uint8 slotIndex, FLinearColor newColor){ }
bool AFGColorGun::Server_SetPrimaryColorForSlot_Validate(uint8 slotIndex, FLinearColor newColor){ return bool(); }
void AFGColorGun::SetSecondaryColorForSlot(uint8 slotIndex, FLinearColor newColor){ }
void AFGColorGun::Server_SetSecondaryColorForSlot_Implementation(uint8 slotIndex, FLinearColor newColor){ }
bool AFGColorGun::Server_SetSecondaryColorForSlot_Validate(uint8 slotIndex, FLinearColor newColor){ return bool(); }
FLinearColor AFGColorGun::GetPrimaryColorForSlot(uint8 index) const{ return FLinearColor(); }
FLinearColor AFGColorGun::GetSecondaryColorForSlot(uint8 index) const{ return FLinearColor(); }
void AFGColorGun::Equip( AFGCharacterPlayer* character){ }
void AFGColorGun::Tick(float DeltaSeconds){ }
void AFGColorGun::ApplyCrosshairState(){ }
EFGColorGunTargetType AFGColorGun::FindIfValidColorTarget(){ return EFGColorGunTargetType(); }
void AFGColorGun::UnEquip(){ }
void AFGColorGun::ProcessInstantHit_Confirmed(const FHitResult& hitResult){ }
void AFGColorGun::AddEquipmentActionBindings(){ }
void AFGColorGun::OnSecondaryFirePressed(){ }
