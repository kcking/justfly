// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGGameUserSettings.h"

void UFGGameUserSettings::ApplyNonResolutionSettings(){ }
void UFGGameUserSettings::SetToDefaults(){ }
void UFGGameUserSettings::ResetToCurrentSettings(){ }
void UFGGameUserSettings::ValidateSettings(){ }
void UFGGameUserSettings::LoadSettings(bool bForceReload){ }
void UFGGameUserSettings::SetAudioToDefaults(){ }
void UFGGameUserSettings::ResetAudioToCurrentSettings(){ }
UFGGameUserSettings* UFGGameUserSettings::GetFGGameUserSettings(){ return nullptr; }
void UFGGameUserSettings::SetAudioVolume(FString name, float value){ }
float UFGGameUserSettings::GetAudioVolume(FString name){ return float(); }
void UFGGameUserSettings::SetArachnophobiaMode(bool newArachnophobiaMode){ }
void UFGGameUserSettings::SetInvertedLook(bool newInvertLook){ }
void UFGGameUserSettings::SetHoldToSprint(bool newHoldToSprint){ }
void UFGGameUserSettings::SetAutoSortInventory(bool shouldAutoSort){ }
void UFGGameUserSettings::SetFOV(int32 newFOV){ }
void UFGGameUserSettings::SetMotionBlurEnabled(bool enable){ }
bool UFGGameUserSettings::IsMotionBlurEnabled(){ return bool(); }
bool UFGGameUserSettings::IsMotionBlurDirty() const{ return bool(); }
void UFGGameUserSettings::SetHZBOEnabled(bool enable){ }
bool UFGGameUserSettings::IsHZBOEnabled(){ return bool(); }
bool UFGGameUserSettings::IsHZBODirty() const{ return bool(); }
int32 UFGGameUserSettings::GetDefaultQualitySetting(FString settingName){ return int32(); }
void UFGGameUserSettings::SetNeworkQuality(int32 newNetworkQuality){ }
void UFGGameUserSettings::RefreshNetworkQualityValues(){ }
void UFGGameUserSettings::UpdateIsRestartRequired(){ }
bool UFGGameUserSettings::IsUsingCustomQualitySetting(FString settingName){ return bool(); }
bool UFGGameUserSettings::IsPostProcessUsingCustomSettings(){ return bool(); }
void UFGGameUserSettings::SetPostProcessingQuality(int32 Value){ }
void UFGGameUserSettings::UpdatePostProcessSettings(){ }
void UFGGameUserSettings::AddCustomActionMapping(FFGKeyMapping newMapping){ }
void UFGGameUserSettings::RemoveAllCustomActionMappings(){ }
void UFGGameUserSettings::SetHeadBobScale(float newHeadBobScale){ }
void UFGGameUserSettings::SetAutosaveInterval(int32 newInterval){ }
void UFGGameUserSettings::ApplyAutosaveInterval(){ }
void UFGGameUserSettings::SetShowBreakNotification(bool enabled){ }
bool UFGGameUserSettings::GetBoolOptionValue(FString cvar){ return bool(); }
void UFGGameUserSettings::SetBoolOptionValue(FString cvar, bool value, bool updateInstantly , bool requireRestart){ }
int32 UFGGameUserSettings::GetIntOptionValue(FString cvar){ return int32(); }
void UFGGameUserSettings::SetIntOptionValue(FString cvar, int32 value, bool updateInstantly , bool requireRestart){ }
float UFGGameUserSettings::GetFloatOptionValue(FString cvar){ return float(); }
void UFGGameUserSettings::SetFloatOptionValue(FString cvar, float value, bool updateInstantly , bool requireRestart){ }
void UFGGameUserSettings::SetCvarValue(FString cvar, int32 value){ }
void UFGGameUserSettings::SetCvarValue(FString cvar, float value){ }
void UFGGameUserSettings::SetDefaultIntOptionValue(FString cvar, int32 value, FText tooltip){ }
void UFGGameUserSettings::SetDefaultFloatOptionValue(FString cvar, float value, FText tooltip){ }
void UFGGameUserSettings::SetupDefaultOptionsValues(){ }
void UFGGameUserSettings::RegisterConsoleVariable(FString cvar, int32 value, FString tooltip){ }
void UFGGameUserSettings::RegisterConsoleVariable(FString cvar, float value, FString tooltip){ }
void UFGGameUserSettings::ApplyPendingChanges(){ }
void UFGGameUserSettings::ApplyRestartRequiredChanges(){ }
void UFGGameUserSettings::CVarSinkHandler(){ }
void UFGGameUserSettings::UpdateCvars(){ }
void UFGGameUserSettings::SubscribeToDynamicOptionUpdate(FString cvar, const FOptionUpdated& optionUpdatedDelegate){ }
void UFGGameUserSettings::UnsubscribeToDynamicOptionUpdate(FString cvar, const FOptionUpdated& optionUpdatedDelegate){ }
void UFGGameUserSettings::UnsubscribeToAllDynamicOptionUpdate(UObject* boundObject){ }
void UFGGameUserSettings::DumpDynamicOptionsSettings(){ }
void UFGGameUserSettings::UpdateFoliageQualityChanges(){ }
bool UFGGameUserSettings::ValidateCVar(FString &cvar){ return bool(); }
void UFGGameUserSettings::SetOptionValue(FString cvar, int32 value){ }
void UFGGameUserSettings::SetOptionValue(FString cvar, float value){ }
void UFGGameUserSettings::BroadcastDynamicOptionUpdate(FString cvar){ }
FAutoConsoleVariableSink UFGGameUserSettings::mCVarSink = NULL;
const FString UFGGameUserSettings::MOTION_BLUR_QUALITY = FString();
const FString UFGGameUserSettings::HZBO_SETTING = FString();
