// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGLocomotive.h"
#include "FGRailroadVehicleHologram.h"
#include "FGLocomotiveMovementComponent.h"
#include "FGPowerInfoComponent.h"
#include "FGPowerConnectionComponent.h"

void AFGLocomotive::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const{ }
void AFGLocomotive::PreReplication(IRepChangedPropertyTracker & ChangedPropertyTracker){ }
AFGLocomotive::AFGLocomotive() : Super() {
	this->mPowerConsumption.Min = 0; this->mPowerConsumption.Max = 15;
	this->mSlidingShoe = CreateDefaultSubobject<UFGPowerConnectionComponent>(TEXT("SlidingShoe"));
	this->mPowerInfo = CreateDefaultSubobject<UFGPowerInfoComponent>(TEXT("powerInfo"));
	this->mVehicleMovement = CreateDefaultSubobject<UFGLocomotiveMovementComponent>(TEXT("MovementComp"));
	this->mLength = 500;
	this->mHologramClass = AFGRailroadVehicleHologram::StaticClass();
	this->mDisabledByWaterLocations.SetNum(1); this->mDisabledByWaterLocations[0].X = 0; this->mDisabledByWaterLocations[0].Y = 0; this->mDisabledByWaterLocations[0].Z = 0;
	this->mSignificanceRange = 20000;
	this->mSimulationDistance = 20000;
	this->mShouldAttachDriver = true;
}
void AFGLocomotive::BeginPlay(){ }
bool AFGLocomotive::DriverEnter( AFGCharacterPlayer* driver){ return bool(); }
bool AFGLocomotive::DriverLeave(bool keepDriving){ return bool(); }
EMultipleUnitControl AFGLocomotive::GetMultipleUnitRole() const{ return EMultipleUnitControl(); }
bool AFGLocomotive::CanSetTrainMultipleUnitMaster() const{ return bool(); }
bool AFGLocomotive::SetMultipleUnitControlMaster(bool force){ return bool(); }
void AFGLocomotive::ClearMultipleUnitControlMaster(){ }
void AFGLocomotive::SetPowerConsumption(float pct){ }
void AFGLocomotive::SetPowerRegeneration(float pct){ }
void AFGLocomotive::DisplayDebug( UCanvas* canvas, const  FDebugDisplayInfo& debugDisplay, float& YL, float& YPos){ }
FName AFGLocomotive::VehicleMovementComponentName = FName();
