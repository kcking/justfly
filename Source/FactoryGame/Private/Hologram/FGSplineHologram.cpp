// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGSplineHologram.h"
#include "FGBuildableRoad.h"
#include "FGBuildableRailroadTrack.h"
#include "FGBuildableFoundation.h"
#include "Components/SplineComponent.h"

AFGSplineHologram::AFGSplineHologram() : Super() {
	this->mSplineComponent = CreateDefaultSubobject<USplineComponent>(TEXT("mSplineComponent")); this->mSplineComponent->SetupAttachment(this->RootComponent);
	this->mMaxPlacementFloorAngle = 35;
	this->mValidHitClasses.Add(AFGBuildableFoundation::StaticClass()); this->mValidHitClasses.Add(AFGBuildableRailroadTrack::StaticClass()); this->mValidHitClasses.Add(AFGBuildableRoad::StaticClass());
	this->mUseBuildClearanceOverlapSnapp = true;
	this->bHidden = true;
	this->bReplicates = true;
}
void AFGSplineHologram::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const{ }
void AFGSplineHologram::BeginPlay(){ }
void AFGSplineHologram::SerializeConstructMessage(FArchive& ar, FNetConstructionID id){ }
void AFGSplineHologram::ClientPreConstructMessageSerialization(){ }
void AFGSplineHologram::ServerPostConstructMessageDeserialization(){ }
void AFGSplineHologram::OnPendingConstructionHologramCreated_Implementation(AFGHologram* fromHologram){ }
bool AFGSplineHologram::IsConnectionSnapped(bool lastConnection){ return bool(); }
void AFGSplineHologram::GetLastSplineData(FSplinePointData& data){ }
void AFGSplineHologram::ResetBuildSteps(){ }
bool AFGSplineHologram::CheckClearanceForShapeIgnoreStructure(FCollisionShape& shape, FTransform transform, ECollisionChannel chanel, const FComponentQueryParams& params){ return bool(); }
void AFGSplineHologram::OnRep_SplineData(){ }
void AFGSplineHologram::UpdateSplineComponent(){ }
