// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGPipelineHologram.h"
#include "FGBuildable.h"
#include "FGBuildableRoad.h"
#include "FGBuildableRailroadTrack.h"
#include "FGBuildableFoundation.h"

AFGPipelineHologram::AFGPipelineHologram() : Super() {
	this->mBendRadius = 199;
	this->mBendRadius2D = 199;
	this->mMaxLength = 100;
	this->mMaxPlacementFloorAngle = 35;
	this->mValidHitClasses.Add(AFGBuildableFoundation::StaticClass()); this->mValidHitClasses.Add(AFGBuildableRailroadTrack::StaticClass()); this->mValidHitClasses.Add(AFGBuildableRoad::StaticClass()); this->mValidHitClasses.Add(AFGBuildable::StaticClass());
	this->bHidden = true;
	this->bReplicates = true;
}
void AFGPipelineHologram::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const{ }
void AFGPipelineHologram::BeginPlay(){ }
void AFGPipelineHologram::SetHologramLocationAndRotation(const FHitResult& hitResult){ }
void AFGPipelineHologram::RouteSelectedSplineMode(FVector startLocation, FVector startNormal, FVector endLocation, FVector endNormal){ }
bool AFGPipelineHologram::DoMultiStepPlacement(bool isInputFromARelease){ return bool(); }
int32 AFGPipelineHologram::GetBaseCostMultiplier() const{ return int32(); }
void AFGPipelineHologram::SpawnChildren(AActor* hologramOwner, FVector spawnLocation, APawn* hologramInstigator){ }
void AFGPipelineHologram::GetSupportedScrollModes(TArray< EHologramScrollMode >* out_modes) const{ }
void AFGPipelineHologram::GetSupportedSplineModes_Implementation(TArray< EHologramSplinePathMode >& out_splineModes) const{ }
bool AFGPipelineHologram::IsValidHitResult(const FHitResult& hitResult) const{ return bool(); }
void AFGPipelineHologram::AdjustForGround(const FHitResult& hitResult, FVector& out_adjustedLocation, FRotator& out_adjustedRotation){ }
bool AFGPipelineHologram::TrySnapToActor(const FHitResult& hitResult){ return bool(); }
void AFGPipelineHologram::OnInvalidHitResult(){ }
void AFGPipelineHologram::Scroll(int32 delta){ }
bool AFGPipelineHologram::CanTakeNextBuildStep() const{ return bool(); }
void AFGPipelineHologram::SerializeConstructMessage(FArchive& ar, FNetConstructionID id){ }
void AFGPipelineHologram::ClientPreConstructMessageSerialization(){ }
void AFGPipelineHologram::ServerPostConstructMessageDeserialization(){ }
void AFGPipelineHologram::OnPendingConstructionHologramCreated_Implementation(AFGHologram* fromHologram){ }
void AFGPipelineHologram::ResetBuildSteps(){ }
void AFGPipelineHologram::GetLastSplineData(FSplinePointData &data){ }
bool AFGPipelineHologram::IsConnectionSnapped(bool lastConnection){ return bool(); }
void AFGPipelineHologram::SetSnapToGuideLines(bool isEnabled){ }
void AFGPipelineHologram::ConfigureActor( AFGBuildable* inBuildable) const{ }
void AFGPipelineHologram::ConfigureComponents( AFGBuildable* inBuildable) const{ }
void AFGPipelineHologram::CheckValidFloor(){ }
void AFGPipelineHologram::CheckClearance(){ }
void AFGPipelineHologram::CheckValidPlacement(){ }
void AFGPipelineHologram::SetupPipeClearanceDetector(){ }
int32 AFGPipelineHologram::GetNumSections() const{ return int32(); }
void AFGPipelineHologram::UpdateSplineComponent(){ }
void AFGPipelineHologram::UpdateConnectionComponentsFromSplineData(){ }
void AFGPipelineHologram::UpdateSplineCompFromSplineData(){ }
void AFGPipelineHologram::AutoRouteSpline(const FVector& startConnectionPos,
		const FVector& startConnectionNormal,
		const FVector& endConnectionPos,
		const FVector& endConnectionNormal){ }
void AFGPipelineHologram::Auto2DRouteSpline(const FVector& startConnectionPos,
		const FVector& startConnectionNormal,
		const FVector& endConnectionPos,
		const FVector& endConnectionNormal){ }
void AFGPipelineHologram::AutoRouteNoodleSpline(const FVector& startConnectionPos, const FVector& startConnectionNormal, const FVector& endConnectionPos, const FVector& endConnectionNormal){ }
void AFGPipelineHologram::HorizontalAndVerticalRouteSpline(bool horizontalFirst,
		const FVector& startConnectionPos,
		const FVector& startConnectionNormal,
		const FVector& endConnectionPos,
		const FVector& endConnectionNormal){ }
void AFGPipelineHologram::HorizontalAndVerticalRouteSplineNew(bool horizontalFirst,
		const FVector& startConnectionPos,
		const FVector& startConnectionNormal,
		const FVector& endConnectionPos,
		const FVector& endConnectionNormal){ }
void AFGPipelineHologram::PathFindingRouteSpline(TArray<  FHologramAStarNode >& pathNodes,
		const FVector& startConnectionPos,
		const FVector& startConnectionNormal,
		const FVector& endConnectionPos,
		const FVector& endConnectionNormal){ }
bool AFGPipelineHologram::ValidateMinLength(){ return bool(); }
float AFGPipelineHologram::ValidateCurvatureAndReturnFaultyPosition(){ return float(); }
bool AFGPipelineHologram::ValidateFluidRequirements(){ return bool(); }
