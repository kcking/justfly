// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGBuildableSubsystem.h"

#if STATS
#endif 
AFGBuildableSubsystem::AFGBuildableSubsystem() : Super() {
	this->mDistanceConsideredClose = 30000;
	this->mNumFactoriesNeededForCloseCheck = 5;
	this->mColorSlotsPrimary[0].B = 39; this->mColorSlotsPrimary[0].G = 112; this->mColorSlotsPrimary[0].R = 255; this->mColorSlotsPrimary[0].A = 255;
	this->mColorSlotsSecondary[0].B = 67; this->mColorSlotsSecondary[0].G = 34; this->mColorSlotsSecondary[0].R = 29; this->mColorSlotsSecondary[0].A = 255;
	this->mNbPlayerExposedSlots = 16;
	this->mUseFixedFactoryTick = true;
	this->mMinFactoryTickRate = 30;
	this->mMaxFactoryTickRate = 62;
	this->mFactoryOptimizationEnabled = true;
	this->mReplayEffecTimeDilation = 0.100000001490116;
	this->mReplayEffectTimerDefault = 0.5;
	this->PrimaryActorTick.TickGroup = TG_DuringPhysics; this->PrimaryActorTick.EndTickGroup = TG_PrePhysics; this->PrimaryActorTick.bTickEvenWhenPaused = false; this->PrimaryActorTick.bCanEverTick = true; this->PrimaryActorTick.bStartWithTickEnabled = true; this->PrimaryActorTick.bAllowTickOnDedicatedServer = true; this->PrimaryActorTick.TickInterval = 0;
	this->bAlwaysRelevant = true;
	this->bReplicates = true;
}
void AFGBuildableSubsystem::PreSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBuildableSubsystem::PostSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBuildableSubsystem::PreLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBuildableSubsystem::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBuildableSubsystem::GatherDependencies_Implementation(TArray< UObject* >& out_dependentObjects){ }
bool AFGBuildableSubsystem::NeedTransform_Implementation(){ return bool(); }
bool AFGBuildableSubsystem::ShouldSave_Implementation() const{ return bool(); }
void AFGBuildableSubsystem::BeginPlay(){ }
void AFGBuildableSubsystem::EndPlay(const EEndPlayReason::Type EndPlayReason){ }
void AFGBuildableSubsystem::Tick(float dt){ }
void AFGBuildableSubsystem::TickFactory(float dt, ELevelTick TickType){ }
AFGBuildableSubsystem* AFGBuildableSubsystem::Get(UWorld* world){ return nullptr; }
AFGBuildableSubsystem* AFGBuildableSubsystem::Get(UObject* worldContext){ return nullptr; }
AFGBuildable* AFGBuildableSubsystem::BeginSpawnBuildable(TSubclassOf<  AFGBuildable > inClass, const FTransform& inTransform){ return nullptr; }
void AFGBuildableSubsystem::AddBuildable( AFGBuildable* buildable){ }
void AFGBuildableSubsystem::AddConveyor(AFGBuildableConveyorBase* conveyor){ }
AFGBuildableConveyorBase* AFGBuildableSubsystem::GetConnectedConveyorBelt( UFGFactoryConnectionComponent* connection){ return nullptr; }
void AFGBuildableSubsystem::RemoveBuildable( AFGBuildable* buildable){ }
void AFGBuildableSubsystem::RemoveConveyor(AFGBuildableConveyorBase* conveyor){ }
void AFGBuildableSubsystem::RemoveConveyorFromBucket(AFGBuildableConveyorBase* conveyorToRemove){ }
void AFGBuildableSubsystem::RearrangeConveyorBuckets(int32 emptiedBucketID){ }
void AFGBuildableSubsystem::RemoveAndSplitConveyorBucket(AFGBuildableConveyorBase* conveyorToRemove){ }
bool AFGBuildableSubsystem::IsServerSubSystem() const{ return bool(); }
void AFGBuildableSubsystem::GetTypedBuildable(TSubclassOf<  AFGBuildable > inClass, TArray<  AFGBuildable* >& out_buildables) const{ }
void AFGBuildableSubsystem::ReplayBuildingEffects(){ }
bool AFGBuildableSubsystem::HasMaterialInstanceManagerForMaterialInterface(UMaterialInterface* materialInterface, FString& lookupName){ return bool(); }
UFGFactoryMaterialInstanceManager* AFGBuildableSubsystem::GetOrCreateMaterialManagerForMaterialInterface(UMaterialInterface* materialInterface, FString& lookupName, FString& lookupPrefix, bool canBeColored ,  UMeshComponent* onMeshComp  ,  AFGBuildable* forBuildable){ return nullptr; }
void AFGBuildableSubsystem::UpdateBuildableMaterialInstances(AFGBuildable* buildable){ }
void AFGBuildableSubsystem::RemoveFactoryMaterialInstanceFromMap(const FString& lookupName){ }
FLinearColor AFGBuildableSubsystem::GetColorSlotPrimary_Linear(uint8 index){ return FLinearColor(); }
FLinearColor AFGBuildableSubsystem::GetColorSlotSecondary_Linear(uint8 index){ return FLinearColor(); }
void AFGBuildableSubsystem::SetColorSlotPrimary_Linear(uint8 index, FLinearColor color){ }
void AFGBuildableSubsystem::SetColorSlotSecondary_Linear(uint8 index, FLinearColor color){ }
void AFGBuildableSubsystem::DisplayDebug( UCanvas* canvas, const  FDebugDisplayInfo& debugDisplay, float& YL, float& YPos){ }
void AFGBuildableSubsystem::DebugEnableInstancing(bool enabled){ }
void AFGBuildableSubsystem::DebugGetFactoryActors(TArray< AActor* >& out_actors){ }
FNetConstructionID AFGBuildableSubsystem::GetNewNetConstructionID(){ return FNetConstructionID(); }
void AFGBuildableSubsystem::GetNewNetConstructionID(FNetConstructionID& clientConstructionID){ }
void AFGBuildableSubsystem::SpawnPendingConstructionHologram(FNetConstructionID netConstructionID,  AFGHologram* templateHologram,  AFGBuildGun* instigatingBuildGun){ }
void AFGBuildableSubsystem::AddPendingConstructionHologram(FNetConstructionID netConstructionID,  AFGHologram* hologram){ }
void AFGBuildableSubsystem::RemovePendingConstructionHologram(FNetConstructionID netConstructionID){ }
AFGPlayerController* AFGBuildableSubsystem::GetLocalPlayerController() const{ return nullptr; }
float AFGBuildableSubsystem::GetDistanceSqToBoundingBox(const FVector& point,  AFGBuildable* buildable) const{ return float(); }
void AFGBuildableSubsystem::RegisterFactoryTickFunction(bool shouldRegister){ }
void AFGBuildableSubsystem::CreateFactoryStatID() const{ }
void AFGBuildableSubsystem::UpdateReplayEffects(float dt){ }
void AFGBuildableSubsystem::AddBuildableMeshInstances( AFGBuildable* buildable){ }
void AFGBuildableSubsystem::TickFactoryActors(float dt){ }
void AFGBuildableSubsystem::DumpFixedFactoryTickValues() const{ }
UFGColoredInstanceManager* AFGBuildableSubsystem::GetColoredInstanceManager( UFGColoredInstanceMeshProxy* proxy){ return nullptr; }
bool AFGBuildableSubsystem::IsBasedOn(const UMaterialInterface* instance, const UMaterial* base){ return bool(); }
