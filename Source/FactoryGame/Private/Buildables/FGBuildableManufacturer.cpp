// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGBuildableManufacturer.h"
#include "FGFactoryHologram.h"
#include "FGPowerInfoComponent.h"

void AFGBuildableManufacturer::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const{ }
void AFGBuildableManufacturer::PreReplication(IRepChangedPropertyTracker& ChangedPropertyTracker){ }
AFGBuildableManufacturer::AFGBuildableManufacturer() : Super() {
	this->mManufacturingSpeed = 1;
	this->mPowerConsumptionExponent = 1.60000002384186;
	this->mPowerInfoClass = UFGPowerInfoComponent::StaticClass();
	this->mMinimumProducingTime = 2;
	this->mMinimumStoppedTime = 5;
	this->mNumCyclesForProductivity = 20;
	this->mCanChangePotential = true;
	this->mCurrentPotential = 1;
	this->mPendingPotential = 1;
	this->mMinPotential = 0.00999999977648258;
	this->mMaxPotential = 1;
	this->mMaxPotentialIncreasePerCrystal = 0.5;
	this->mFluidStackSizeDefault = EStackSize::SS_FLUID;
	this->mSignificanceRange = 18000;
	this->mHologramClass = AFGFactoryHologram::StaticClass();
	this->MaxRenderDistance = -1;
	this->mFactoryTickFunction.TickGroup = TG_PrePhysics; this->mFactoryTickFunction.EndTickGroup = TG_PrePhysics; this->mFactoryTickFunction.bTickEvenWhenPaused = false; this->mFactoryTickFunction.bCanEverTick = true; this->mFactoryTickFunction.bStartWithTickEnabled = true; this->mFactoryTickFunction.bAllowTickOnDedicatedServer = true; this->mFactoryTickFunction.TickInterval = 0;
	this->mPrimaryColor.R = -1; this->mPrimaryColor.G = -1; this->mPrimaryColor.B = -1; this->mPrimaryColor.A = 1;
	this->mSecondaryColor.R = -1; this->mSecondaryColor.G = -1; this->mSecondaryColor.B = -1; this->mSecondaryColor.A = 1;
	this->mDismantleEffectClassName = FSoftClassPath("/Game/FactoryGame/Buildable/Factory/-Shared/BP_MaterialEffect_Dismantle.BP_MaterialEffect_Dismantle_C");
	this->mBuildEffectClassName = FSoftClassPath("/Game/FactoryGame/Buildable/Factory/-Shared/BP_MaterialEffect_Build.BP_MaterialEffect_Build_C");
	this->mHighlightParticleClassName = FSoftClassPath("/Game/FactoryGame/Buildable/-Shared/Particle/NewBuildingPing.NewBuildingPing_C");
	this->PrimaryActorTick.TickGroup = TG_PrePhysics; this->PrimaryActorTick.EndTickGroup = TG_PrePhysics; this->PrimaryActorTick.bTickEvenWhenPaused = false; this->PrimaryActorTick.bCanEverTick = true; this->PrimaryActorTick.bStartWithTickEnabled = true; this->PrimaryActorTick.bAllowTickOnDedicatedServer = true; this->PrimaryActorTick.TickInterval = 0;
	this->bReplicates = true;
	this->NetCullDistanceSquared = 5624999936;
}
void AFGBuildableManufacturer::BeginPlay(){ }
void AFGBuildableManufacturer::EndPlay(const EEndPlayReason::Type EndPlayReason){ }
bool AFGBuildableManufacturer::IsConfigured() const{ return bool(); }
float AFGBuildableManufacturer::GetProductionCycleTime() const{ return float(); }
float AFGBuildableManufacturer::GetDefaultProductionCycleTime() const{ return float(); }
float AFGBuildableManufacturer::GetProductionCycleTimeForRecipe(TSubclassOf< UFGRecipe > recipe) const{ return float(); }
float AFGBuildableManufacturer::CalcProductionCycleTimeForPotential(float potential) const{ return float(); }
bool AFGBuildableManufacturer::MoveOrDropInputInventory(AFGCharacterPlayer* pawn){ return bool(); }
bool AFGBuildableManufacturer::MoveOrDropOutputInventory(AFGCharacterPlayer* pawn){ return bool(); }
float AFGBuildableManufacturer::GetProductionProgress() const{ return float(); }
void AFGBuildableManufacturer::GetAvailableRecipes(TArray< TSubclassOf<  UFGRecipe > >& out_recipes) const{ }
void AFGBuildableManufacturer::SetRecipe(TSubclassOf<  UFGRecipe > recipe){ }
bool AFGBuildableManufacturer::CanProduce_Implementation() const{ return bool(); }
void AFGBuildableManufacturer::Factory_CollectInput_Implementation(){ }
void AFGBuildableManufacturer::Factory_PullPipeInput_Implementation(float dt){ }
void AFGBuildableManufacturer::Factory_PushPipeOutput_Implementation(float dt){ }
void AFGBuildableManufacturer::Factory_TickProducing(float dt){ }
void AFGBuildableManufacturer::CreateInventories(){ }
void AFGBuildableManufacturer::OnRep_CurrentRecipe(){ }
void AFGBuildableManufacturer::OnRep_ReplicationDetailActor(){ }
void AFGBuildableManufacturer::GetInputInventoryItems(TArray< FInventoryStack >& out_items) const{ }
void AFGBuildableManufacturer::ClearInputInventoryItems(){ }
void AFGBuildableManufacturer::GetOutputInventoryItems(TArray< FInventoryStack >& out_items){ }
void AFGBuildableManufacturer::ClearOutputInventoryItems(){ }
void AFGBuildableManufacturer::SetUpInventoryFilters(){ }
bool AFGBuildableManufacturer::AssignInputAccessIndices(TSubclassOf< UFGRecipe > recipe){ return bool(); }
bool AFGBuildableManufacturer::AssignOutputAccessIndices(TSubclassOf< UFGRecipe > recipe){ return bool(); }
void AFGBuildableManufacturer::Factory_ConsumeIngredients(){ }
bool AFGBuildableManufacturer::HasRequiredIngredients() const{ return bool(); }
